let amqp,generateUuid;_b6f‍.w("amqplib",[["default",["amqp"],function(v){amqp=v}]]);_b6f‍.w("uuid/v4",[["default",["generateUuid"],function(v){generateUuid=v}]]);

let r = require('rethinkdb');
let val;
const delay = t =>
{
    return new Promise((resolve, reject) => setTimeout(() => resolve(), t));
}
async function monitor_slave() {
    try
    {
        const amqpUrl = "amqp://localhost";
        const connection = await amqp.connect(amqpUrl);
        const channel = await connection.createChannel();

        const callQueue = "Call";
        const replayQueue = "Replay";
        const amqpQueue = await channel.assertQueue(replayQueue, { exclusive: false });

        let correlationId;
        const interval = setInterval(async _ => {
            correlationId = generateUuid();
            const message = '0';
            console.log(`${message}`)

            channel.sendToQueue(callQueue,
                Buffer.from(message), {
                correlationId: correlationId,
                replyTo: amqpQueue.queue
            });
        }, 5000);

        channel.consume(amqpQueue.queue, message => {
            if (message && message.properties.correlationId === correlationId)
                _b6f‍.g.console.log(message.content.toString())
        }, { noAck: true });

        process.on('exit', _ => {
            connection.close();
            clearInterval(interval);
        });
    }
    catch(err)
    {
        _b6f‍.g.console.log(err);
    }
}

const master_slave = async () =>
{
    try
    {
        const amqpUrl = "amqp://localhost";
        const connection = await amqp.connect(amqpUrl);
        const channel = await connection.createChannel();
    
        const callQueue = "Call3";
        const amqpQueue = await channel.assertQueue(callQueue, { durable: false });
    
        channel.prefetch(5); // Max concurrent calls 
    
        channel.consume(amqpQueue.queue, async message => {
            if (!message)
                return;
    
            const params = message.content.toString();
            //console.log(params);
            r.connect({ host: 'localhost', port: 28015 },async function(err, conn) {
                if(err) throw err;
                let i = parseInt(params);
                _b6f‍.g.console.log(i);
                await r.table('Degrees').filter({"year": i}).sum('degree').
                run(conn, function(err, cursor) {
                  if (err) throw err;
                 _b6f‍.g.console.log(cursor);
                 val = cursor;
              });
                
                
              });
    
            await delay(1500);
            channel.sendToQueue(message.properties.replyTo,
                Buffer.from(`${val}`), {
                correlationId: message.properties.correlationId
            });
    
            channel.ack(message);
        });
    
        process.on('exit', _ => {
            connection.close();
        });
    }
    catch(err)
    {
        _b6f‍.g.console.log(err);
    }
}
monitor_slave();
master_slave();